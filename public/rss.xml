<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Isabel Roses' blog</title><link>https://isabelroses.com</link><description>Isabel Roses' blog</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Thu, 28 Dec 2023 22:55:55 +0000</lastBuildDate><item><title>Self-Healing URLs</title><link>https://isabelroses.com/posts/self-healing-urls-3</link><description>I have been working on the creation of this [version](https://github.com/isabelroses/website/commit/8c53b9f3576d98a2ebe71976a3f921a30e6ad052) of my website for a while and when I finally thought I was done, I was introduced to the concept of self-healing URLs.

Self-healing URLs are designed in a way that if a user was to type in a URL as long as a certain part of the URL is correct, the user will be redirected to the correct page. This is useful for when a user is trying to access a page that has been moved or deleted.

For example, if a user was to type in [&lt;domain&gt;/blog/gaoengioa-2](https://isabelroses.com/blog/gaoengioa-2) they would be redirected to [&lt;domain&gt;/blog/self-healing-urls-2](https://isabelroses.com/blog/self-healing-urls-2) as the only important part of the URL is the "2" in this case, which refers to the second blog post by ID.

To implement this I had to make a few changes to my code. The original way that the post data was being fetched was by using the slug of the post. This meant that if the slug was incorrect, the post would not be found and the user would be redirected to a 404 page. To fix this I had to change the way that the post was being fetched to use the ID of the post instead. This meant that if the slug was incorrect, the post would still be found and the user would be redirected to the correct page.

```js
// the old code
get post() {
    return meta.posts.find((post: any) =&gt; post.slug == this.$route.params.slug);
}

// the new code
get post() {
    // get the id from the slug
    const id = (this.$route.params.slug).toString().split("-").slice(-1)[0];
    // find the post using the id
    const post = meta.posts.find((post: any) =&gt; post.id == id);

    if (this.$route.params.slug != post?.slug) {
        // create the correct slug
        const slug = post?.slug + "-" + id;
        // redirect to the correct page
        this.$router.push({ name: "BlogPost", params: { slug: slug } });
    }

    return post;
}
```

Then all that was left was to ensure all links were using the new slug format. This was done by changing the way that the slug was being created. Instead of using the title of the post, the slug was created using the title and the id of the post. This meant that the slug would always be unique and would always be the same for the same post.

#### Inspiration

The original idea for this post comes from: [https://www.youtube.com/watch?v=a6lnfyES-LA](https://www.youtube.com/watch?v=a6lnfyES-LA)</description><guid isPermaLink="false">https://isabelroses.com/posts/self-healing-urls-3</guid><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate></item><item><title>NixOS and PostgreSQL</title><link>https://isabelroses.com/posts/nixos-and-postgresql-2</link><description>When upgrading to version 15 from 14, there was an issue. None of my data was transferred. To fix this issue I swapped to the `posgres` user who is a superuser on the PostgreSQL databases.

Then to preform the migration I ran:

```sql
-- to do this without swapping user you can use the flag -U
pg_dumpall &gt; sqldump
```

then when I had the sqldump file, the following command was run from the command line to get use the sqldump file to recover the previous data

```bash
psql -f sqldump
```</description><guid isPermaLink="false">https://isabelroses.com/posts/nixos-and-postgresql-2</guid><pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate></item><item><title>My workflow</title><link>https://isabelroses.com/posts/my-workflow-1</link><description>In order to keep myself on track I wanted to document my workflow. So in order to do that this post will be kept up to date every 3 months or so with additional input and changes to how I work.
Currently, I use NixOS and have my neovim config managed through nix, a big thanks to [@nekowinson](https://github.com/nekowinston) for all their help.

To start right away with things that I wish to get better at:

- vim motions
- touch typing
- go
- rust
- nix

This list were created in order to improve my basic workflow to improve the generic speed that I work at. To start I barely use vim motions despite using neovim as my main editor, and touch typing goes along well with this.
And despite using NixOS I feel like I barely know anything about nix.

In order to also properly manage myself I have two main tools [bellado](https://github.com/isabelroses/bellado) and [vikunja](https://vikunja.io) having these two separate is really inconvenient but in order to use my to-do list well it needs to be accessible via the command line and through the web so whether I'm out and about or on my main work machine every will work well.
One way I plan to improve this issue is to allow bellado to interact with my vikunja instance.</description><guid isPermaLink="false">https://isabelroses.com/posts/my-workflow-1</guid><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate></item></channel></rss>